service: appsync-quick-start
frameworkVersion: "3"
configValidationMode: error
variablesResolutionMode: 20210219

plugins:
  - serverless-appsync-plugin

custom:
  appSync:
    - name: appsync-quick-start
      schema: schema.api.graphql
      authenticationType: AMAZON_COGNITO_USER_POOLS
      userPoolConfig:
        awsRegion: eu-west-1
        defaultAction: ALLOW
        userPoolId: !Ref CognitoUserPool
      mappingTemplatesLocation: mapping-templates
      mappingTemplates:
        - type: Query
          field: getBlogById
          dataSource: blogsTable
        - type: Query
          field: listBlogs
          dataSource: blogsTable
        - type: Mutation
          field: createBlog
          dataSource: blogsTable

dataSources:
  - type: AMAZON_DYNAMODB
    name: blogsTable
    config:
      tableName: !Ref BlogsTable


provider:
  name: aws
  region: eu-west-1
  stage: dev
  endpointType: REGIONAL

resources:
  Resources:
    BlogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: blogId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: blogId
            AttributeType: S
        Tags:
          - Key: Name
            Value: blogs-table

    #cognito users pool

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        UserPoolName: BlogPostUserPool

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    #Cognito users pool for Admin group

    CognitoAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: !Ref CognitoUserPool
        GroupName: Admin
        RoleArn: !GetAtt CognitoAdminIAMrole.Arn
        Description: "Admin users belong to this group"

    #Cognito Admin IAM role

    CognitoAdminIAMrole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
        Description: "This is the IAM role that admin group users name"
        Policies:
          - PolicyName: "blogpost-admin-group-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource:
                    - !GetAtt BlogsTable.Arn
        RoleName: "blogpost-admin-role"

    #Cognito users pool for Readers group

    CognitoReaderGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: !Ref CognitoUserPool
        GroupName: Reader
        RoleArn: !GetAtt CognitoReaderIAMrole.Arn
        Description: "Reader belongs to this group"

    #Cognito Reader IAM role

    CognitoReaderIAMrole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
        Description: "This is the IAM role for reader group"
        Policies:
          - PolicyName: "blogpost-reader-group-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:Query"
                    - "dynamodb:BatchGetItem"
                  Resource:
                    - !GetAtt BlogsTable.Arn
        RoleName: "blogpost-reader-role"
